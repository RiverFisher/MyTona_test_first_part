Вышеприведённый код - произведение искусства. Prgраммиsты плачут.

1) Статическая переменная (не поле и не свойство объекта) - это глобальная переменная,
которая доступна для пространства имён класса. Она не входит в состав объекта и существует независимо от
количества объектов данного типа.
Свойством объекта она быть не может!

2) Статическая функция (не метод) - это глобальная функция, которая доступна для пространства имён класса.
Чтобы её вызвать не требуется объект, достаточно обратиться к пространству имён класса.
И про объекты она ничего не знает, пока ей явным образом не передать указатель или ссылку на объект,
через который она может обратиться к нему.
Но статические переменные статическая функция видит (поскольку расположены в одном пространстве имён).

Поэтому для данного описания класса не имеет смысла следующая строка кода:
// A* A::child = new A(); // Выключайте свет!

Глобальной переменной, доступной из пространства имён класса A, присвоим значение указателя на область
памяти для вновь созданного объекта... И это написано в области кода, где имеет место только реализация
статической переменной... при том факте, что в конструкторе класса переменную child устанавливают в
nullptr.

Если мы с вами одинаково думаем, код должен быть исправлен следующим образом.

1) Необходимо убрать модификатор static для переменной child. После этого невозможно будет обращаться
к ней, указывая пространство имён класса: переменная будет являться членом данных класса, и нельзя будет
говорить о доступе к переменной класса, появится доступ к свойству каждого объекта типа этого класса.

2) Убрать с глаз долой строку:
// A* A::child = new A(); // [select code snippet] -> (Delete || Backspace)
Эта строка как не имела смысла в первоначальном варианте, так и не имеет смысла в исправленном.
В исправленном варианте она вообще не допустима.

3) Теперь, когда речь идёт о свойстве объектов, можно, после завершения выполнения тела конструктора,
установить значение для члена данных child класса A:
// a->child = new A();

Таким образом, исправленный код может быть таким:

#include <stdio.h>

class A {
public:
    A() {
        someValue++;
        child = nullptr;
    }
    ~A() {}
    int someValue;
    A* child;
};

int main(int argc, char** argv) {
    A* a = new A();
    a->child = new A();
    printf("%d", a->child->someValue);
    return 0;
}

Но есть и другой вариант исправления.

1) Пусть переменная child остаётся объявленной как static.

2) Строку:
// A* A::child = new A();
исправляем на:
// A* A::child;
Теперь это всего-навсего реализация статической переменной. Без неё будет невозможно обращаться к
статической переменной child (даже в конструкторе). В первоначальном варианте инициализация:
// ... = new A();
не имела смысла, поскольку конструктор инициализирует переменную значением nullptr.

3) Теперь, для того, чтобы всё-таки инициализировать статическую переменную желаемым значением,
добавим строку:
// a->child = new A();
после создания объекта класса A в теле функции main.

Таким образом, исправленный код может быть таким:

#include <stdio.h>

class A {
public:
    A() {
        someValue++;
        child = nullptr;
    }
    ~A() {}
    int someValue;
    static A* child;
};

A* A::child;

int main(int argc, char** argv) {
    A* a = new A();
    a->child = new A();
    printf("%d", a->child->someValue);
    return 0;
}
